c, N = "32741061239905197703104605748699454886916984305984954184244050047230671341982402904717428055626985510980645730452379959512849880922990618655159479747663871746096248175629202975057700041741792063367921271730037271921772065686547554347125081678869322708064088864893279780816027555942185224708373665947180187477543497608223768238090075770461721800587881021326388785726679576863569018495339086395964320631623691144371788074045401886206303494004913006695509519158464 413633665475665657090504735327711183799070845278064691090313167567436355654048383500678729487256957176376259938897488994970512108717274528141212205972449836307143577176275221302652520230953619304732319803443592735959795088278026679508982335639543038050988199632943504781615800658623639794410933355444478460246879208725440207646278052289798467806535868899262547949162011365038354275437966427939231587696195157148195247441007343457310792789545428671671191457116363".split()
c, N = int(c), int(N)

import gmpy2

root3 = int(gmpy2.iroot(N, 3)[0]) | 1

while True:
    if(N % root3 == 0):
        print("R found:", root3)
        break
    root3 += 2

nn = N // root3
root2 = int(gmpy2.iroot(nn, 2)[0]) | 1

while True:
    if(nn % root2 == 0):
        print("p found:", root2)
        break
    root2 += 2

root = nn // root2
p, q, r = root2, root3, root

phi = (p - 1) * (q - 1) * (r - 1)
d = pow(0x10001, -1, phi)
p = pow(c, d, N)

print(p.to_bytes((p.bit_length() + 1) // 8, byteorder='big'))
