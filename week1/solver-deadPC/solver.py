from gmpy2 import iroot

c = 41321556365443928097396638386596798892337022493860821864562861082090374698456011559675768324064820218504899920589258568175922294135560791400487884492456694189905475602372160223530906189146263336210995989456044831360028709366596178447778366208748194745904331495417565151718814147920538330199142997875607633114 
n = 110741576193042530214297990061048468145722848044613413292706429899593750991341731057841343494212310074170013827345923516855635687587590041467593175481546739056462687706317330541653653823784708531855863014937790477425986722002085190297968229030363054097127612319091690457807416541689401654035475431850177623809 
# 65537 => e => 0x10001

# p and q is the primes might be closer than they should be
# p - q is just small number so it make can be bruteforce

# pars = int(iroot(n, 2)[0]) + 1

# while True:
#     pars += 2
#     if(n % pars == 0):
#         print(pars)
#         print("Found factor")
#         break

p = 10523382355167112819368334325178629063020349178738706906260740710982565497356101223216546179379148708217111943611289290457838951352587576477297663519865571
q = n // p

print(n == p*q)
phi = (p-1)*(q-1)
e = 65537
d = pow(e, -1, phi)
m = pow(c, d, n)
# print(hex(m))
print(bytes.fromhex(hex(m)[2:]))

# print(pars)