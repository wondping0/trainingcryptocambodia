

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_255 = Integer(255); _sage_const_257 = Integer(257); _sage_const_0p9 = RealNumber('0.9'); _sage_const_10 = Integer(10); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
from Crypto.Util.number import getPrime

# S1 = (r1 + 1Hint(encodepoint(R) + pk + m) * a) % l
# S2 = (r2 + 2Hint(encodepoint(R) + pk + m) * a) % l
#S1*2Hint - S2*1Hint = r1-r2 mod l

import random
a = random.getrandbits(_sage_const_255 )
l = getPrime(_sage_const_257 )
B = int(l**_sage_const_0p9 )
print(len(bin(B)))
assert B<l
count = _sage_const_10 
Hi = [random.randrange(_sage_const_0 , B) for _ in range(count)]
lr = [random.randrange(_sage_const_0 , B) for _ in range(count)]

Si = [(j+i*a)%l for i,j in zip(Hi, lr)]


Zn = Zmod(l)

mat = [[_sage_const_0  for _ in range(count+_sage_const_2 )] for __ in range(count+_sage_const_2 )]
for i in range(count): 
    mat[i][i] = l
    mat[-_sage_const_2 ][i] = -Hi[i]
    mat[-_sage_const_1 ][i] = Si[i]
mat[-_sage_const_2 ][-_sage_const_2 ] = B/l
mat[-_sage_const_1 ][-_sage_const_1 ] = B

L = matrix(QQ, mat).LLL()
#print(L)
for row in list(L):
    if [abs(x) for x in row[:-_sage_const_2 ]] == lr:
        print("found")

