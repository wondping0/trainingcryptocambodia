

# This file was *autogenerated* from the file prob.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_5 = Integer(5); _sage_const_1024 = Integer(1024); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4)
import random
coefs = [random.randrange(_sage_const_2 **_sage_const_512 ) for _ in range(_sage_const_5 )]
Sums = []
public = []

for i in range(_sage_const_2 ):
    public_values = [random.randrange(_sage_const_2 **_sage_const_1024 ) for _ in range(_sage_const_5 )]
    S = _sage_const_0 
    for l,r in zip(coefs, public_values):
        S += l*r
    Sums.append(S)
    public.append(public_values)

P = Primes()
scale_inf = P.next(_sage_const_2 **_sage_const_1024 )
mat = [
    [_sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 ,        scale_inf * public[_sage_const_0 ][_sage_const_0 ], scale_inf * public[_sage_const_1 ][_sage_const_0 ]],
    [_sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 ,        scale_inf * public[_sage_const_0 ][_sage_const_1 ], scale_inf * public[_sage_const_1 ][_sage_const_1 ]],
    [_sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 ,        scale_inf * public[_sage_const_0 ][_sage_const_2 ], scale_inf * public[_sage_const_1 ][_sage_const_2 ]],
    [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 ,        scale_inf * public[_sage_const_0 ][_sage_const_3 ], scale_inf * public[_sage_const_1 ][_sage_const_3 ]],
    [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 ,        scale_inf * public[_sage_const_0 ][_sage_const_4 ], scale_inf * public[_sage_const_1 ][_sage_const_4 ]],
    [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1  * _sage_const_2 **_sage_const_512 , scale_inf * -Sums[_sage_const_0 ],     scale_inf * -Sums[_sage_const_1 ]   ],
]

mat = Matrix(ZZ, mat).LLL()
print(mat[_sage_const_0 ])
print(coefs)

