

# This file was *autogenerated* from the file solve_g6.sage
from sage.all_cmdline import *   # import sage library

_sage_const_256 = Integer(256); _sage_const_65232440764167888067867461045980530026620621460767400132464710193591223171338784352428416065149242686716464817966789474749778412267934909972019185708907605967091311859992939049400522910876454170330749680796075864244177755971675323660757521098398261093691087325263953054730435514962484216527711400563082519583 = Integer(65232440764167888067867461045980530026620621460767400132464710193591223171338784352428416065149242686716464817966789474749778412267934909972019185708907605967091311859992939049400522910876454170330749680796075864244177755971675323660757521098398261093691087325263953054730435514962484216527711400563082519583); _sage_const_46473006258279143425770695618972905524226898173377751832475546857590470251902893209129262137326976836863514952840492895984308201641303481291345601873622504829837979276294398348972411987791341199940719652206272376129339005747034024679311521670571470186742206077609390572063781306116434462258256252443963194208 = Integer(46473006258279143425770695618972905524226898173377751832475546857590470251902893209129262137326976836863514952840492895984308201641303481291345601873622504829837979276294398348972411987791341199940719652206272376129339005747034024679311521670571470186742206077609390572063781306116434462258256252443963194208); _sage_const_13608896792592084436902254787131014635935243010325877079141565073144904685140758408452535745078411465024273119543456549412707978008538585607602882916324890888372504954309468152985901394237357353177988983923154533373254751667303114091526631148807671957158305860629483156982655245868140057670904126066712833457 = Integer(13608896792592084436902254787131014635935243010325877079141565073144904685140758408452535745078411465024273119543456549412707978008538585607602882916324890888372504954309468152985901394237357353177988983923154533373254751667303114091526631148807671957158305860629483156982655245868140057670904126066712833457); _sage_const_13 = Integer(13); _sage_const_300 = Integer(300); _sage_const_0 = Integer(0)
from Crypto.Util.number import bytes_to_long, long_to_bytes

SECRET = b'REDACTED'

# m1 = bytes_to_long(SECRET+b'BERSAMA_DISIPLIN_SUKSES_LARI')
m2 = bytes_to_long(b'MAINKAN_PERMAINAN_ITU_SEMOGA'+SECRET)
# m3 = bytes_to_long(b'KITA_'+SECRET+b'_BISA_RAIH_BINTANG')

p2 = b'BERSAMA_DISIPLIN_SUKSES_LARI'
p2_int = bytes_to_long(p2)

p3 = b'MAINKAN_PERMAINAN_ITU_SEMOGA'
p3_int = bytes_to_long(p3)

m1_int = bytes_to_long(SECRET)

print(m2 == p3_int * pow(_sage_const_256 , len(SECRET)) + m1_int)

# print("m1:",m1)
# print("m1_int:",m1_int)
# print("p2_int:",p2_int)

# print("256 * m1_int + p2_int:", pow(256, len(p2)) * m1_int + p2_int)

n = _sage_const_65232440764167888067867461045980530026620621460767400132464710193591223171338784352428416065149242686716464817966789474749778412267934909972019185708907605967091311859992939049400522910876454170330749680796075864244177755971675323660757521098398261093691087325263953054730435514962484216527711400563082519583 

c1 = _sage_const_46473006258279143425770695618972905524226898173377751832475546857590470251902893209129262137326976836863514952840492895984308201641303481291345601873622504829837979276294398348972411987791341199940719652206272376129339005747034024679311521670571470186742206077609390572063781306116434462258256252443963194208 
c2 = _sage_const_13608896792592084436902254787131014635935243010325877079141565073144904685140758408452535745078411465024273119543456549412707978008538585607602882916324890888372504954309468152985901394237357353177988983923154533373254751667303114091526631148807671957158305860629483156982655245868140057670904126066712833457 

e = _sage_const_13 

R = Zmod(n)['X']; (X,) = R._first_ngens(1)

for i in range(_sage_const_300 ):
    try:
        f1 = ((pow(_sage_const_256 , len(p2)) * X + p2_int) ** e) - c1
        f2 = ((pow(_sage_const_256 , i) * p3_int + X) ** e) - c2
        def my_gcd(a, b): 
            return a.monic() if b == _sage_const_0  else my_gcd(b, a % b)

        c = -my_gcd(f1, f2).coefficients()[_sage_const_0 ]
        m = long_to_bytes(int(c))
        print(m.decode())
    except:
        pass

